import datetime
import httpobsdashboard.conf
import httpobsdashboard.dashboard
import json
import os.path
import sys

from collections import OrderedDict
from copy import deepcopy
from jinja2 import Environment, FileSystemLoader

if __name__ == '__main__':
    if len(sys.argv) < 2 or sys.argv[-1] not in ['json-generate', 'www-generate']:
        print('Must run with either json-generate or www-generate')
        sys.exit()

    today = str(datetime.datetime.now()).split('.')[0]
    __dirname = os.path.abspath(os.path.dirname(__file__))

    if sys.argv[1] == 'json-generate':
        # Create a copy of the sites object (generated by parsing sites.json) that we store the results in
        sites = deepcopy(httpobsdashboard.conf.sites)

        # First prime all the sites (to speed up scans)
        all_hosts = []
        for group in sites:
          for subGroup in sites[group]:
            for host in sites[group][subGroup]:
                all_hosts.append(host)
        httpobsdashboard.dashboard.mass_scan_priming(all_hosts)

        # Then go retrieve the results
        for group in sites:
          for subGroup in sites[group]:
            for host in sites[group][subGroup]:
                # Now retrieve all the results
                response = httpobsdashboard.dashboard.retrieve(host)
                analysis = httpobsdashboard.dashboard.analyze(host, response)

                # Store the results
                sites[group][subGroup][sites[group][subGroup].index(host)] = {
                    host: analysis
                }

        # Write the results to disk
        __filenames = (
            os.path.join(__dirname, 'dist', 'data', 'results.json'),
            # os.path.join(__dirname, 'dist', 'data', '-'.join(['results', today]) + '.json')
        )

        for __filename in __filenames:
            with open(__filename, 'w') as f:
                json.dump(sites, f)

    elif sys.argv[1] == 'www-generate':
        with open(os.path.join(__dirname, 'dist', 'data', 'results.json'), 'r') as f:
            sites = json.load(f, object_pairs_hook=OrderedDict)

        # Information to pass into the rendererererer
        config = {
            'AUTHOR': 'April King',
            'DATE': today,
            'SITENAME': 'Mozilla Observatory Dashboard',
            'sites': sites
        }

        # Render the page templates
        env = Environment(loader=FileSystemLoader(os.path.join(__dirname, 'templates')))
        template = env.get_template('index.html')
        with open(os.path.join(__dirname, 'dist', 'index.html'), 'w') as f:
            f.write(template.render(**config))
